"""
Django settings for config project (Production-ready for LWS cPanel).
"""

from pathlib import Path
import os
import importlib.util

from environs import Env
from dotenv import load_dotenv

# ----------------------------
# Base & .env
# ----------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# Charge d'abord le .env à la racine du projet
load_dotenv(BASE_DIR / ".env")

# Optionnel: environs pour lecture facilitée
env = Env()
env.read_env()

def getenv_bool(name: str, default=False) -> bool:
    return str(os.getenv(name, str(int(default)))).lower() in ("1", "true", "yes", "on")

# ----------------------------
# Debug / Secret
# ----------------------------
DEBUG = os.getenv("DJANGO_DEBUG", "0") == "1"
SECRET_KEY = env("DJANGO_SECRET_KEY", default="dev-insecure-key")  # OK pour dev uniquement

# ----------------------------
# Allowed Hosts
# ----------------------------
if not DEBUG:
    default_hosts = [
        "auditsanspeur.com",
        "www.auditsanspeur.com",
        "127.0.0.1",
        "localhost",
        "web51.lws-hosting.com"  # utile si LWS fait des checks directs
    ]
    ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=default_hosts)
else:
    ALLOWED_HOSTS = ["*"]  # ou restreint à localhost si tu préfères
    
print("ALLOWED_HOSTS =", ALLOWED_HOSTS)

# ----------------------------
# Cookies / HTTPS Security
# ----------------------------
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG

# Rediriger automatiquement vers HTTPS (activé par défaut en prod)
SECURE_SSL_REDIRECT = getenv_bool("SECURE_SSL_REDIRECT", default=not DEBUG)

# HSTS : mets 86400 (1j) au début, puis 31536000 (1 an) une fois validé
SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "86400" if not DEBUG else "0"))
SECURE_HSTS_INCLUDE_SUBDOMAINS = getenv_bool("SECURE_HSTS_INCLUDE_SUBDOMAINS", default=False)
SECURE_HSTS_PRELOAD = getenv_bool("SECURE_HSTS_PRELOAD", default=False)


SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Derrière proxy (Varnish/CDN LWS), active ce header pour que Django détecte HTTPS
if os.getenv("USE_SECURE_PROXY_SSL_HEADER", "1" if not DEBUG else "0") == "1":
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# ----------------------------
# CSRF trusted origins (prod)
# ----------------------------
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=["https://auditsanspeur.com", "https://www.auditsanspeur.com"])

# ----------------------------
# Applications
# ----------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # apps projet
    "core",
    "store",
    "downloads",
    "legal",
]

# ----------------------------
# Middleware
# ----------------------------
USE_WHITENOISE = os.getenv("USE_WHITENOISE", "1").lower() not in ("0", "false", "off")
HAS_WHITENOISE = importlib.util.find_spec("whitenoise") is not None

MIDDLEWARE = ["django.middleware.security.SecurityMiddleware"]

if USE_WHITENOISE and HAS_WHITENOISE:
    MIDDLEWARE.append("whitenoise.middleware.WhiteNoiseMiddleware")

MIDDLEWARE += [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ----------------------------
# Static / Media
# ----------------------------
# IMPORTANT : on aligne avec ton .htaccess qui sert /apps/auditshield/static/ et /media/
STATIC_URL = "/static/"
# Tu peux garder un dossier "static" app-level, pas besoin d'ajouter STATICFILES_DIRS en prod

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"          # /home/.../apps/auditshield/media

# Médias privés (payants)
PRIVATE_MEDIA_ROOT = BASE_DIR / "private_media"

# Stockage (avec whitenoise si dispo)
if USE_WHITENOISE and HAS_WHITENOISE:
    STORAGES = {
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
    }
else:
    STORAGES = {
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
    }

# ----------------------------
# Templates / WSGI / ASGI
# ----------------------------
ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# ----------------------------
# Database
# ----------------------------
DB_SUFFIX = os.getenv("DB_SUFFIX", "dev")
DB_ENGINE = env("DB_ENGINE", "django.db.backends.sqlite3")

if DB_ENGINE == "django.db.backends.postgresql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env("DB_NAME"),
            "USER": env("DB_USER"),
            "PASSWORD": env("DB_PASSWORD"),
            "HOST": env("DB_HOST", "localhost"),
            "PORT": env.int("DB_PORT", 5432),
            "CONN_MAX_AGE": env.int("DB_CONN_MAX_AGE", 60),
            # "OPTIONS": {"sslmode": env("DB_SSLMODE", "prefer")},  # active si imposé par l'hébergeur
        }
    }
else:
    # Fallback SQLite (dev uniquement)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / f"db_{DB_SUFFIX}.sqlite3",
        }
    }

if os.getenv("PRINT_DB_PATH") == "1" and DB_ENGINE == "django.db.backends.sqlite3":
    print(f"[settings] Using DB file: {DATABASES['default']['NAME']}")

# ----------------------------
# Internationalization
# ----------------------------
LANGUAGE_CODE = "fr-fr"
TIME_ZONE = "Africa/Bamako"
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----------------------------
# CinetPay
# ----------------------------
CINETPAY_SITE_ID = os.environ.get("CINETPAY_SITE_ID")
CINETPAY_API_KEY = os.environ.get("CINETPAY_API_KEY")
CINETPAY_SECRET_KEY = os.environ.get("CINETPAY_SECRET_KEY")  # facultatif selon intégration
CINETPAY_MODE = os.getenv('CINETPAY_MODE', 'PROD').upper()

# En dev: URLs locales ; en prod: URLs https sur auditsanspeur.com
if DEBUG:
    CINETPAY_NOTIFY_URL = os.environ.get("CINETPAY_NOTIFY_URL", "http://127.0.0.1:8000/offres/notify/")
    CINETPAY_RETURN_URL = os.environ.get("CINETPAY_RETURN_URL", "http://127.0.0.1:8000/offres/retour/")
    CINETPAY_CANCEL_URL = os.environ.get("CINETPAY_CANCEL_URL", "http://127.0.0.1:8000/offres/cancel/")
else:
    CINETPAY_NOTIFY_URL = os.environ.get("CINETPAY_NOTIFY_URL", "https://auditsanspeur.com/offres/notify/")
    CINETPAY_RETURN_URL = os.environ.get("CINETPAY_RETURN_URL", "https://auditsanspeur.com/offres/retour/")
    CINETPAY_CANCEL_URL = os.environ.get("CINETPAY_CANCEL_URL", "https://auditsanspeur.com/offres/cancel/")

CINETPAY_ENV = os.getenv("CINETPAY_ENV", "sandbox")
CINETPAY_BASE_URL = os.getenv("CINETPAY_BASE_URL", "https://api-checkout.cinetpay.com/v2/payment")

# ----------------------------
# Email (SMTP)
# ----------------------------
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
EMAIL_HOST = os.getenv("EMAIL_HOST", "mail.auditsanspeur.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 465))
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "True") == "True"
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "False") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv(
    "DEFAULT_FROM_EMAIL",
    f"Audit Sans Peur <{EMAIL_HOST_USER}>" if EMAIL_HOST_USER else "webmaster@localhost",
)
SERVER_EMAIL = os.getenv("SERVER_EMAIL", EMAIL_HOST_USER or "root@localhost")

# ----------------------------
# Logging
# ----------------------------
LOG_DIR = BASE_DIR / "logs"
os.makedirs(LOG_DIR, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"},
        "simple": {"format": "%(levelname)s: %(message)s"},
    },
    "handlers": {
        # vers fichier (rotation)
        "app_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_DIR / "app.log"),
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 3,
            "formatter": "verbose",
        },
        # vers console (Passenger capte stdout/stderr -> visible dans passenger.log)
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {"handlers": ["app_file", "console"], "level": "INFO", "propagate": True},
        # ton code (logging.getLogger(__name__))
        "": {"handlers": ["app_file", "console"], "level": "INFO"},
    },
}

# --- Static files (prod LWS) ---
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Liens d'achat externes par produit (slug)
EXTERNAL_BUY_LINKS = {
    # Remplace par le slug réel de ton produit standard
    "ebook-audit-sans-peur": {
        "selar": {
            "label": "Selar",
            "url": "https://selar.co/ta-page-produit",
            "badge": "Recommandé",
            "description": "Paiement en NGN/FCFA, adapté Afrique de l’Ouest.",
            "notes": "Après achat, l’ebook contient des liens sécurisés vers vos bonus sur auditsanspeur.com.",
        },
        "publiseer": {
            "label": "Publiseer",
            "url": "https://publiseer.com/ta-page-produit",
            "description": "Distribution mondiale (Amazon, Google, Apple).",
        },
        "youscribe": {
            "label": "YouScribe Afrique",
            "url": "https://youscribe.com/ta-page-produit",
            "description": "Portée Afrique francophone.",
        },
        "chariow": {
            "label": "Chariow",
            "url": "https://chariow.com/ta-page-produit",
            "description": "Extension régionale.",
        },
    }
}


